#pragma kernel Update1

Texture2D<float4> _BaseMap;
RWTexture2D<float4> State1;
RWTexture2D<float4> State2;

cbuffer ColorBuffer : register(b0){
    float4 CellColor;
    float4 TextureSize;
}

bool CellUpdater(float4 cell, uint2 texCoord, RWTexture2D<float4> state);
bool IsCellAlive(float4 cell);

[numthreads(8,8,1)]
void Update1 (uint3 id : SV_DispatchThreadID)
{
    // Use id to access the corresponding pixel in the texture
    uint2 texCoord = id.xy;

    // Fetch the current state of the cell
    float4 cell = State1.Load(texCoord);

    // Implement Game of Life rules in CellUpdater function
    bool nextState = CellUpdater(cell, texCoord, State1);

    // Set the new state in State2 texture
    State2[texCoord] = nextState ? CellColor : float4(0, 0, 0, 1);
}

#pragma kernel Update2
[numthreads(8,8,1)]
void Update2 (uint3 id : SV_DispatchThreadID)
{
    // Use id to access the corresponding pixel in the texture
    uint2 texCoord = id.xy;

    // Fetch the current state of the cell
    float4 cell = State2.Load(texCoord);

    // Implement Game of Life rules in CellUpdater function
    bool nextState = CellUpdater(cell, texCoord, State2);

    // Set the new state in State1 texture
    State1[texCoord] = nextState ? CellColor : float4(0, 0, 0, 1);
}

bool CellUpdater(float4 cell, uint2 texCoord, RWTexture2D<float4> state)
{
    // 1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
    // 2. Any live cell with two or three live neighbours lives on to the next generation.
    // 3. Any live cell with more than three live neighbours dies, as if by overpopulation.
    // 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
    
    // Count live neighbors
    int liveNeighbors = 0;
    for (int dx = -1; dx <= 1; ++dx)
    {
        for (int dy = -1; dy <= 1; ++dy)
        {
            if (dx == 0 && dy == 0)
                continue;

            uint2 neighborCoord = texCoord + uint2(dx, dy);
            
            // Use IsCellAlive to check if the neighbor cell is alive
            liveNeighbors += IsCellAlive(state.Load(neighborCoord));
        }
    }

    // Apply Game of Life rules
    if (IsCellAlive(cell))
    {
        // Rule 1 and 3
        return liveNeighbors == 2 || liveNeighbors == 3;
    }
    else
    {
        // Rule 4
        return liveNeighbors == 3;
    }
}

bool IsCellAlive(float4 cell)
{
    return cell.x + cell.y + cell.z > 0;
}

// FullTexture Seed
#pragma kernel InitFullTexture
[numthreads(8, 8, 1)]
void InitFullTexture(uint3 id : SV_DispatchThreadID)
{
    if (id.x % 7 == 0 || id.y % 3 == 0)
        State1[id.xy] = CellColor;
}

// R-Pentomino Seed
#pragma kernel InitRPentomino
[numthreads(8, 8, 1)]
void InitRPentomino(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 255 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 256 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 257 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 256 && id.y == 257)
        State1[id.xy] = CellColor;
}

// Acorn Seed
#pragma kernel InitAcorn
[numthreads(8, 8, 1)]
void InitAcorn(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 257 && id.y == 257)
        State1[id.xy] = CellColor;
    if (id.x == 254 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 258 && id.y == 257)
        State1[id.xy] = CellColor;
    if (id.x == 259 && id.y == 257)
        State1[id.xy] = CellColor;
    if (id.x == 254 && id.y == 257)
        State1[id.xy] = CellColor;
    if (id.x == 253 && id.y == 257)
        State1[id.xy] = CellColor;
}

// Gosper Gun Seed
#pragma kernel InitGun
[numthreads(8, 8, 1)]
void InitGun(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 255 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 254 && id.y == 254)
        State1[id.xy] = CellColor;
    if (id.x == 255 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 255 && id.y == 257)
        State1[id.xy] = CellColor;
    if (id.x == 254 && id.y == 258)
        State1[id.xy] = CellColor;
    if (id.x == 253 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 252 && id.y == 259)
        State1[id.xy] = CellColor;
    if (id.x == 252 && id.y == 253)
        State1[id.xy] = CellColor;
    if (id.x == 251 && id.y == 259)
        State1[id.xy] = CellColor;
    if (id.x == 251 && id.y == 253)
        State1[id.xy] = CellColor;
    if (id.x == 250 && id.y == 258)
        State1[id.xy] = CellColor;
    if (id.x == 250 && id.y == 254)
        State1[id.xy] = CellColor;
    if (id.x == 249 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 249 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 249 && id.y == 257)
        State1[id.xy] = CellColor;
    if (id.x == 240 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 240 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 239 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 239 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 259 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 259 && id.y == 254)
        State1[id.xy] = CellColor;
    if (id.x == 259 && id.y == 253)
        State1[id.xy] = CellColor;
    if (id.x == 260 && id.y == 255)
        State1[id.xy] = CellColor;
    if (id.x == 260 && id.y == 254)
        State1[id.xy] = CellColor;
    if (id.x == 260 && id.y == 253)
        State1[id.xy] = CellColor;
    if (id.x == 261 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 261 && id.y == 252)
        State1[id.xy] = CellColor;
    if (id.x == 263 && id.y == 257)
        State1[id.xy] = CellColor;
    if (id.x == 263 && id.y == 256)
        State1[id.xy] = CellColor;
    if (id.x == 263 && id.y == 252)
        State1[id.xy] = CellColor;
    if (id.x == 263 && id.y == 251)
        State1[id.xy] = CellColor;
    if (id.x == 273 && id.y == 254)
        State1[id.xy] = CellColor;
    if (id.x == 273 && id.y == 253)
        State1[id.xy] = CellColor;
    if (id.x == 274 && id.y == 254)
        State1[id.xy] = CellColor;
    if (id.x == 274 && id.y == 253)
        State1[id.xy] = CellColor;
}




